@startuml

package GraphingPackage {
  package GraphEncoding {
    class Canvas {
       {field} - PixelInstance : array of array of TPixel
       {field} - Height : integer
       {field} - Width : integer
      {method} + Canvas
      {method} + Canvas(integer, integer)
      {method} + Destroy
      {method} + integer GetCanvasHeight
      {method} + integer GetCanvasWidth
      {method} + Debug
    }

    class Pixel {
       {field} - PixelColor : TColor
       {field} - PixelLayer : integer
      {method} + Pixel
      {method} + Pixel(Color)
      {method} + Pixel(Color, integer)
      {method} + Destroy
      {method} + SetPixelColor(TColor) 
      {method} + SetLayer(integer) 
      {method} + TColor GetPixelColor() 
      {method} + integer GetPixelLayer()
      {method} + Debug
    }

    class Color {
       {field} - RedC : integer
       {field} - GreenC : integer
       {field} - BlueC : integer
      {method} + Color
      {method} + Color(integer, integer, integer)
      {method} + Debug
      {method} + SetColor(integer, integer, integer)
      {method} + SetRedC(integer)
      {method} + SetGreenC(integer)
      {method} + SetBlueC(integer)
      {method} + SetChannel(integer, integer, integer)
      {method} + integer GetRedC()
      {method} + integer GetGreenC()
      {method} + integer GetBlueC()
    }
  }

  package GraphPresets {
    class GraphScale {
       {field} - GSGraphBorder : TGraphBorder
       {field} - GSNumeric : array of TNumeric
       {field} - GSCoordinateAxes : array of TCoordinateAxis
       {field} - GSAxesTicMarks : array of TAxisTicMarks
      {method} + Create
      {method} + Create(real, real, real, real)
      {method} + Destroy
      {method} + WriteGraphScaleToCanvas(TCanvas)
    }

    class AxisTicMarks {
       {field} - ATMColor : TColor
       {field} - ATMQuantity : integer
       {field} - ATMWidth : integer
       {field} - ATMHeight : integer
      {method} + Create(integer, integer, integer, char)
      {method} + Destroy
      {method} + WriteATMToCanvas(TCanvas)
      {method} + integer GetATMQuantity
      {method} + integer GetATMWidth
      {method} + integer GetATMHeight
    }

    class CoordinateAxis {
       {field} - CAColor : TColor
       {field} - AxisMin : real
       {field} - AxisMax : real
       {field} - AxisWidth : integer
      {method} + Create(real, real, integer, char)
      {method} + Destroy
      {method} + real GetAxisMin()
      {method} + real GetAxisMax()
      {method} + WriteCoordinateAxisToCanvas(TCanvas)
    }

    class GraphBorder {
       {field} - BorderColor : TColor
       {field} - BorderWidth : integer
      {method} + GraphBorder(integer)
      {method} + Destroy
      {method} + WriteBorderToCanvas(TCanvas)
      {method} + integer GetBorder()
    }

    class Numeric {
       {field} - MonoSegment : array of array of integer
       {field} - Complement : array of boolean
       {field} - NumericLiteral : string
       {field} - NumericHeight : integer
       {field} - NumericWidth : integer
      {method} + Create(real, integer, integer)
      {method} + Destroy
      {method} + WriteNumericToCanvas(integer, integer, TCanvas)
      {method} + WriteMonoDigitToCanvas(integer, integer, integer, TCanvas)
      {method} + WriteComplementToCanvas(integer, integer, integer, TCanvas)
      {method} + Debug
    }
  }

}

package FileIO {
  class relation {
    {method} + void write_rel_to_canvas(canvas *, GraphScale *, double(double), color*, double)
    {method} + int map_scale_to_canvas(canvas *, graph_scale *, axis, double)
  }

  class file_io {
    {method} + write_canvas_to_file(char *, canvas *)
  }
}

package FunctionCFG {
  package Lexer {
    class Lexer {
       {field} - Source : string
       {field} - CurrentIndex : integer
      {method} + Create(string)
      {method} + Destroy
      {method} + TToken LexToken
      {method} + string LexWord
      {method} + string LexNumber
      {method} + TTokenStack LexSource
      {method} + Debug
    }
  }

  package Parser {
    class Parser {
      {method} + real EvaluateTree(TAbstractSyntaxTree, real)
      {method} + TAbstractSyntaxTree ParseExpression(TTokenStack)
      {method} + TAbstractSyntaxTree ParseTerm(TTokenStack)
      {method} + TAbstractSyntaxTree ParseFactor(var TokStack : TTokenStack)
      {method} + TAbstractSyntaxTree BinaryTree(TAbstractSyntaxTree,
 TAbstractSyntaxTree, TAbstractSyntaxTree)
      {method} + TAbstractSyntaxTree UnaryTree(TAbstractSyntaxTree,
 TAbstractSyntaxTree, TAbstractSyntaxTree)
    }

    class AbstractSyntaxTree {
       {field} - Value : TToken
       {field} - Children : TAbstractSyntaxTree
       {field} - NoChildren : integer
      {method} + Create(TToken)
      {method} + Destroy
      {method} + SetNoChildren(integer)
      {method} + SetChild(integer, TAbstractSyntaxTree)
      {method} + TToken GetValue
      {method} + TAbstractSyntaxTree GetChild(integer)
      {method} + Debug;
    }
  }

  package Token {
    class Token {
       {field} - TokenLiteral : Token
       {field} - TokType : TTokenType
      {method} + Create(TTokenType, string)
      {method} + Destroy
      {method} + Debug
    }

    class TokenStack {
       {field} - Value : TToken
       {field} - Previous : TTokenType
      {method} + Create(TToken)
      {method} + Destroy
      {method} + SetPrevious(TTokenStack)
      {method} + Debug
      {method} + TTokenStack Push(TToken)
      {method} + TTokenStack Pop
      {method} + TTokenStack PopStack
      {method} + TToken GetValue
      {method} + TTokenStack GetPrevious
    }

    enum TokenType {
      TokenVar,
      TokenFileName,
      TokenNumber,
      TokenPlus,
      TokenMinus,
      TokenMult,
      TokenDiv,
      TokenLParen,
      TokenRParen,
      TokenComma,
      TokenPower,
      TokenSin,
      TokenCos,
      TokenTan,
      TokenArcSin,
      TokenArcCos,
      TokenArcTan,
      TokenLog,
      TokenNewline
      {method} + string TokenTypeToString(TTokenType)
    }
  }
}

' file_io related
file_io --> Lexer
file_io --> GraphScale
file_io --> Canvas
file_io --> Parser

' The arrows to color
Pixel       o--> Color

' The arrows relating to GraphEncoding
Canvas "1" o--> "*" Pixel

' The arrows relating to GraphingPresets
AxisTicMarks   "2" <-up-o "1" GraphScale
CoordinateAxis "2" <-up-o "1" GraphScale
GraphBorder        <-up-o     GraphScale
Numeric        "2" <-up-o "1" GraphScale

Token       o--> TokenType
TokenStack o--> Token

Parser --> AbstractSyntaxTree
Parser --> TokenStack

@enduml
